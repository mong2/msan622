p <- ggplot(moviesRB,aes(x=budget,y=rating,color=genre))+geom_point(alpha = .2*prop)
p <- p +scale_color_manual("Genre",values = palette)
p <- p +scale_x_continuous(labels = dollar)+scale_y_continuous(limits=c(0,10))
p <- p +xlab("Budget")+ylab("Rating")
}
# server.R
shinyServer(
function(input, output) {
#getHighlight <- reactive({
# result <- levels(movies$Species)
#return(result[which(result %in% input$highlight)])
#})
output$plot1 <- renderPlot({
print(getPlot(input$checkGroup,input$mpaa,input$minbudget,input$maxbudget))
})
}
)
runApp()
library(shiny)
library(scales)
library(ggplot2)
data("movies", package = "ggplot2")
getPlot <- function(highlight,mpaaRB,minb,maxb) {
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre <-genre
movies <- subset(movies, budget>0)
# filter by budget amounts
if (minb+maxb>0) {
moviesB <-subset(movies, budget >= minb*1000000 & budget <=maxb*1000000)
} else {
moviesB <-movies
}
# gray out if not selected
palette <- brewer_pal(type = "qual", palette = "Set1")(9)
# Need to re-code with switch; may perform more than change.
if (!1 %in% highlight ) {
palette[1] <- "#EEEEEE"
}
if (!2 %in% highlight ) {
palette[2] <- "#EEEEEE"
}
if (!3 %in% highlight ) {
palette[3] <- "#EEEEEE"
}
if (!4 %in% highlight ) {
palette[4] <- "#EEEEEE"
}
if (!5 %in% highlight ) {
palette[5] <- "#EEEEEE"
}
if (!6 %in% highlight ) {
palette[6] <- "#EEEEEE"
}
if (!7 %in% highlight ) {
palette[7] <- "#EEEEEE"
}
if (!8 %in% highlight ) {
palette[8] <- "#EEEEEE"
}
if (!9 %in% highlight ) {
palette[9] <- "#EEEEEE"
}
# Only show selected
if (mpaaRB != "All") {
moviesRB <- subset(moviesB,mpaa==mpaaRB)
}
else {
moviesRB <- moviesB
}
# increase alpha level as number of dots decreases
prop  <- nrow(movies)/nrow(moviesRB)
if (prop>5) {prop <- 5}
p <- ggplot(moviesRB,aes(x=budget,y=rating,color=genre))+geom_point(alpha = .2*prop)
p <- p +scale_color_manual("Genre",values = palette)
p <- p +scale_x_continuous(labels = dollar)+scale_y_continuous(limits=c(0,10))
p <- p +xlab("Budget")+ylab("Rating")
}
# server.R
shinyServer(
function(input, output) {
#getHighlight <- reactive({
# result <- levels(movies$Species)
#return(result[which(result %in% input$highlight)])
#})
output$plot1 <- renderPlot({
print(getPlot(input$checkGroup,input$mpaa,input$minbudget,input$maxbudget))
})
}
)
runApp()
library(shiny)
shinyUI(
fluidPage(
titlePanel("IMDB Movie Ratings"),
sidebarPanel(width = 2,
radioButtons("groupMPAA", "MPAA Rating:",
c("All", "PG", "PG-13", "NC-17", "R", "No Rating")),
br(),
checkboxGroupInput("GroupGenre", "Movie Genre:",
choices = list("Action" = 1, "Animation" = 2, "Comedy" = 3, "Drama"=4, "Documentary"=5, "Romance"=6, "Short"=7))
#br(),
),
mainPanel(
tabsetPanel(
tabPanel("Scatterplot",
fluidRow(plotOutput("scatterPlot")),
hr(),
h3("Plot Settings:"),
fluidRow(
column(3,offset = 1,
selectInput("colorScheme", "Color Scheme:",
choices = c("Default", "Accent", "Set1", "Set2","Set3", "Dark2", "Pastel1", "Pastel2", "None")),
selectInput("pointShape", "Shape of Dots:",
choices = c("Circle", "Triangle", "Diamond", "Square","X", "Star", "Target", "Plus"))
),
column(6,offset = 1,
sliderInput("dotsize", "Dot Size:", min=1, max=10, value=3),
sliderInput("dotalpha", "Dot alpha:", min=0.1, max=1.0, value=0.5),
br(),
sliderInput("xaxis_lim", "X-Axis Limits:", min=0, max=200, value=c(0,200)),
sliderInput("yaxis_lim", "Y-Axis Limits:", min=1, max=10, value=c(1,10)))
),
br(),
br(),
br(),
br(),
br()
),
tabPanel("Summary of Data",
p("Below contains a summary of all the data that is SHOWN in the Scatter Plot."),
p("These values are likely to change if you change the options."),
br(),
fluidRow(
column(7,
h3("NUMERIC DATA"),
tableOutput("table_numeric")),
column(4,
h3("FACTOR DATA"),
tableOutput("table_factor"))
)
)
)
)
)
)
library(ggplot2)
library(shiny)
library(scales)
#LOAD DATA
loadData <- function() {
data("movies", package = "ggplot2")
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre <- genre
movies$mpaa <- as.character(movies$mpaa)
movies$mpaa[movies$mpaa == ""] <- "No Rating"
movies$mpaa <- factor(movies$mpaa)
return(movies)
}
#Define Format Functions
#### PLOTTING FUNCTION ####
getPlot <- function(localFrame, groupMPAA, GroupGenre, colorScheme = "None", dotsize, dotalpha,
xaxis_lim,yaxis_lim, pointShape) {
# SUBSET BASED ON RATING
if (groupMPAA != "All"){
movies_sub <- subset(localFrame, mpaa == groupMPAA)
}
else{movies_sub <- localFrame}
# SUBSET BASED ON GENRE
genre_names <- c("Action", "Animation", "Comedy", "Drama",
"Documentary", "Romance", "Short")
genre_truth <- as.numeric(GroupGenre)
if (sum(as.numeric(genre_truth)) > 0){
movies_sub <- subset(movies_sub, genre %in% genre_names[genre_truth])
}
#CREATE THE PLOT
plt <- ggplot(data = movies_sub, aes(x=budget/1000000, y=rating, color = mpaa))
# Get shape of the points
if (pointShape == "Circle"){shape <- 20}
else if (pointShape == "Triangle"){shape <- 17}
else if (pointShape == "Diamond"){shape <- 18}
else if (pointShape == "Square"){shape <- 15}
else if (pointShape == "X"){shape <- 4}
else if (pointShape == "Star"){shape <- 8}
else if (pointShape == "Target"){shape <- 10}
else if (pointShape == "Plus"){shape <- 43}
else {shape <- 20}
# Plot Points based on sliders
if (dotalpha > 1){dotalpha <- 1}
if (dotalpha < 0){dotalpha <- 0}
plt <- plt + geom_point(shape = shape,size=dotsize, alpha=dotalpha, na.rm=TRUE)
if (xaxis_lim[2] - xaxis_lim[1] <= 100 && xaxis_lim[2] - xaxis_lim[1] > 50){xsep <- 10}
else if (xaxis_lim[2] - xaxis_lim[1] <= 50){xsep <- 5}
else{xsep <- 20}
# Plot Attributes
plt <- plt + ggtitle("Ratings Due to Movie Budget") +
xlab("Budget (in Millions)") +
ylab("Rating") +
scale_x_continuous(breaks = seq(0,200,xsep), labels = dollar, limits = xaxis_lim) +
scale_y_continuous(breaks = c(seq(1,10,1)), limits = yaxis_lim) +
theme(axis.title=element_text(size=14,face="bold")) +
theme(title = element_text(size=18)) +
theme(legend.position="bottom")
#Define Color Scheme
if (colorScheme != "None" && colorScheme != "Default") {plt <- plt + scale_colour_brewer(palette=colorScheme, limits = levels(localFrame$mpaa))}
else if (colorScheme == "Default") {plt <- plt + scale_colour_brewer(limits = levels(localFrame$mpaa))}
else {plt <- plt + scale_colour_grey(start = 0.5, end = 0.5, limits = levels(localFrame$mpaa))}
return(plt)
}
#### CREATING DATA TABLE ####
createDataTable <- function(localFrame, groupMPAA, GroupGenre, xaxis_lim, yaxis_lim){
#subset based on MPAA rating
if (groupMPAA != "All"){
movies_sub <- subset(localFrame, mpaa == groupMPAA)
}
else{movies_sub <- localFrame}
#subset based on genre
genre_names <- c("Action", "Animation", "Comedy", "Drama",
"Documentary", "Romance", "Short")
genre_truth <- as.numeric(GroupGenre)
if (sum(as.numeric(genre_truth)) > 0){
movies_sub <- subset(movies_sub, genre %in% genre_names[genre_truth])
}
#subset based on limits
movies_sub <- subset(movies_sub, budget/1000000 >= xaxis_lim[1] & budget/1000000 <= xaxis_lim[2])
movies_sub <- subset(movies_sub, rating >= yaxis_lim[1] & rating <= yaxis_lim[2])
summary_ntable <- data.frame(movies_sub$length, movies_sub$budget/1000000, movies_sub$rating, movies_sub$votes)
summary_ftable <- data.frame(movies_sub$mpaa, movies_sub$genre)
names(summary_ntable) <- c("Length", "Budget(Millions)", "Rating", "Votes")
names(summary_ftable) <- c("MPAA Rating", "Genre")
summary_ntable <- summary(summary_ntable, maxsum = 10)
summary_ftable <- summary(summary_ftable, maxsum = 10)
summary_list <- list(summary_ntable, summary_ftable)
return(summary_list)
}
##### GLOBAL OBJECTS #####
# Shared data
globalData <- loadData()
palette1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
##### SHINY SERVER #####
#CREATE SERVER
shinyServer(function(input, output) {
localFrame <- globalData
output$scatterPlot <- renderPlot({
scatterPlot <- getPlot(
localFrame, input$groupMPAA, input$GroupGenre,
input$colorScheme, input$dotsize, input$dotalpha,
input$xaxis_lim, input$yaxis_lim, input$pointShape
)
print(scatterPlot)
})
output$table_numeric <- renderTable({
datatable <- createDataTable(
localFrame, input$groupMPAA, input$GroupGenre,
input$xaxis_lim, input$yaxis_lim
)
return(datatable[[1]])
}, include.rownames = FALSE)
output$table_factor <- renderTable({
datatable <- createDataTable(
localFrame, input$groupMPAA, input$GroupGenre,
input$xaxis_lim, input$yaxis_lim
)
return(datatable[[2]])
}, include.rownames = FALSE)
})
runApp()
###Word Cloud ###
colnames(text_matrix) <- c("W. Bush", "Clinton", "Obama", "Bush")
matrix <- text_matrix[apply(text_matrix,1,sum) >10,]
png("wordCloud_hw4.png", 640, 480)
comparison.cloud(matrix, random.order=FALSE,max.words= 500)
dev.off()
require(tm)
require(SnowballC)
require(wordcloud)
require(ggplot2)
text_source <-DirSource(
directory = file.path("NorthPacific"),
encoding = "UTF-8",
pattern = "*.txt",
recursive =FALSE,
ignore.case = FALSE
)
text_corpus <- Corpus(
text_source,
readerControl = list(
reader = readPlain,
language = "en"))
text_corpus <-tm_map(text_corpus, tolower)
text_corpus <- tm_map(text_corpus, removePunctuation,
preserve_intra_word_dashes = TRUE)
text_corpus <- tm_map(text_corpus, removeWords, stopwords("english"))
text_corpus<- tm_map(
text_corpus,
stemDocument,
lang ="english"
)
text_corpus <- tm_map(text_corpus,stripWhitespace)
text_corpus <- tm_map(
text_corpus,
removeWords,
c("will", "can", "get", "that", "year", "let")
)
text_tdm<-TermDocumentMatrix(text_corpus)
text_matrix <- as.matrix(text_tdm)
text_df <- data.frame(
word = rownames(text_matrix),
freq = rowSums(text_matrix),
stringsAsFactors = FALSE)
text_df <- text_df[with(
text_df,
order(freq, decreasing = TRUE)), ]
rownames(text_df) <- NULL
### Freq Plot ###
freq_df <- data.frame(
Obama = text_matrix[,"Obama2009.txt"],
Bush = text_matrix[,"Bush2001.txt"],
stringAsFactors = FALSE
)
freq_df <- freq_df[order(rowSums(freq_df),
decreasing = TRUE),]
freq_df <- head(freq_df, 20)
p <- ggplot(freq_df, aes(Obama, Bush))+
geom_text(label = rownames(freq_df),
color = "Navy",
position = position_jitter(
width = 4,
height = 2))+
ggtitle("First Term Presidency State of the Union Address")+
geom_abline(intercept = 27.8, slope = -0.586, color="Orange")+
xlab("Obama 2009")+
ylab("Bush  2001")+
theme_bw()+
theme(panel.grid.major = element_line(size = 0.7, linetype = "dotted"),
axis.title.x = element_text(vjust = -0.03, face = "bold"),
axis.title.y = element_text(vjust =0.3,face = "bold"),
plot.title = element_text(face="bold", vjust = 1.4, size =16))+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
coord_fixed(
ratio = 5/6,
xlim = c(0,45),
ylim = c(0,45))
ggsave(
filename = file.path("img", "freqPlot_hw4.png"),
width = 10,
height = 8,
dpi = 100
)
### bar chart ###
bar_df <-head(text_df,10)
bar_df$word <- factor(bar_df$word,
levels = bar_df$word,
ordered = TRUE)
t <- ggplot(bar_df, aes(x = word, y = freq))+
geom_bar(stat = "identity", fill = "royalblue1")+
theme(axis.title.x = element_text(face = "bold", vjust = -0.5),
axis.title.y = element_text(face = "bold", vjust = 0.3),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(face="bold", vjust = 1.4, size =16))+
scale_x_discrete(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
xlab("Top 10 Word Stems")+
ylab("Frequency")+
ggtitle("First Term Presidency State of the Union address (1989,1993,2001,2009)")
print(t)
ggsave(
filename = file.path("img", "textBar_hw4.png"),
width = 10,
height = 7,
dpi = 100
)
###Word Cloud ###
colnames(text_matrix) <- c("W. Bush", "Clinton", "Obama", "Bush")
matrix <- text_matrix[apply(text_matrix,1,sum) >10,]
png("wordCloud_hw4.png", 640, 480)
comparison.cloud(matrix, random.order=FALSE,max.words= 500)
dev.off()
setwd("~/msan622/homework4")
require(tm)
require(SnowballC)
require(wordcloud)
require(ggplot2)
text_source <-DirSource(
directory = file.path("NorthPacific"),
encoding = "UTF-8",
pattern = "*.txt",
recursive =FALSE,
ignore.case = FALSE
)
text_corpus <- Corpus(
text_source,
readerControl = list(
reader = readPlain,
language = "en"))
text_corpus <-tm_map(text_corpus, tolower)
text_corpus <- tm_map(text_corpus, removePunctuation,
preserve_intra_word_dashes = TRUE)
text_corpus <- tm_map(text_corpus, removeWords, stopwords("english"))
text_corpus<- tm_map(
text_corpus,
stemDocument,
lang ="english"
)
text_corpus <- tm_map(text_corpus,stripWhitespace)
text_corpus <- tm_map(
text_corpus,
removeWords,
c("will", "can", "get", "that", "year", "let")
)
text_tdm<-TermDocumentMatrix(text_corpus)
text_matrix <- as.matrix(text_tdm)
text_df <- data.frame(
word = rownames(text_matrix),
freq = rowSums(text_matrix),
stringsAsFactors = FALSE)
text_df <- text_df[with(
text_df,
order(freq, decreasing = TRUE)), ]
rownames(text_df) <- NULL
### Freq Plot ###
freq_df <- data.frame(
Obama = text_matrix[,"Obama2009.txt"],
Bush = text_matrix[,"Bush2001.txt"],
stringAsFactors = FALSE
)
freq_df <- freq_df[order(rowSums(freq_df),
decreasing = TRUE),]
freq_df <- head(freq_df, 20)
p <- ggplot(freq_df, aes(Obama, Bush))+
geom_text(label = rownames(freq_df),
color = "Navy",
position = position_jitter(
width = 4,
height = 2))+
ggtitle("First Term Presidency State of the Union Address")+
geom_abline(intercept = 27.8, slope = -0.586, color="Orange")+
xlab("Obama 2009")+
ylab("Bush  2001")+
theme_bw()+
theme(panel.grid.major = element_line(size = 0.7, linetype = "dotted"),
axis.title.x = element_text(vjust = -0.03, face = "bold"),
axis.title.y = element_text(vjust =0.3,face = "bold"),
plot.title = element_text(face="bold", vjust = 1.4, size =16))+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
coord_fixed(
ratio = 5/6,
xlim = c(0,45),
ylim = c(0,45))
ggsave(
filename = file.path("img", "freqPlot_hw4.png"),
width = 10,
height = 8,
dpi = 100
)
### bar chart ###
bar_df <-head(text_df,10)
bar_df$word <- factor(bar_df$word,
levels = bar_df$word,
ordered = TRUE)
t <- ggplot(bar_df, aes(x = word, y = freq))+
geom_bar(stat = "identity", fill = "royalblue1")+
theme(axis.title.x = element_text(face = "bold", vjust = -0.5),
axis.title.y = element_text(face = "bold", vjust = 0.3),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(face="bold", vjust = 1.4, size =16))+
scale_x_discrete(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
xlab("Top 10 Word Stems")+
ylab("Frequency")+
ggtitle("First Term Presidency State of the Union address (1989,1993,2001,2009)")
print(t)
ggsave(
filename = file.path("img", "textBar_hw4.png"),
width = 10,
height = 7,
dpi = 100
)
###Word Cloud ###
colnames(text_matrix) <- c("W. Bush", "Clinton", "Obama", "Bush")
matrix <- text_matrix[apply(text_matrix,1,sum) >10,]
png("wordCloud_hw4.png", 640, 480)
comparison.cloud(matrix, random.order=FALSE,max.words= 500)
dev.off()
