column(7,
h3("NUMERIC DATA"),
tableOutput("table_numeric")),
column(4,
h3("FACTOR DATA"),
tableOutput("table_factor"))
)
)
)
)
)
)
library(ggplot2)
library(shiny)
library(scales)
#LOAD DATA
loadData <- function() {
data("movies", package = "ggplot2")
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre <- genre
movies$mpaa <- as.character(movies$mpaa)
movies$mpaa[movies$mpaa == ""] <- "No Rating"
movies$mpaa <- factor(movies$mpaa)
return(movies)
}
#Define Format Functions
#### PLOTTING FUNCTION ####
getPlot <- function(localFrame, groupMPAA, GroupGenre, colorScheme = "None", dotsize, dotalpha,
xaxis_lim,yaxis_lim, pointShape) {
# SUBSET BASED ON RATING
if (groupMPAA != "All"){
movies_sub <- subset(localFrame, mpaa == groupMPAA)
}
else{movies_sub <- localFrame}
# SUBSET BASED ON GENRE
genre_names <- c("Action", "Animation", "Comedy", "Drama",
"Documentary", "Romance", "Short")
genre_truth <- as.numeric(GroupGenre)
if (sum(as.numeric(genre_truth)) > 0){
movies_sub <- subset(movies_sub, genre %in% genre_names[genre_truth])
}
#CREATE THE PLOT
plt <- ggplot(data = movies_sub, aes(x=budget/1000000, y=rating, color = mpaa))
# Get shape of the points
if (pointShape == "Circle"){shape <- 20}
else if (pointShape == "Triangle"){shape <- 17}
else if (pointShape == "Diamond"){shape <- 18}
else if (pointShape == "Square"){shape <- 15}
else if (pointShape == "X"){shape <- 4}
else if (pointShape == "Star"){shape <- 8}
else if (pointShape == "Target"){shape <- 10}
else if (pointShape == "Plus"){shape <- 43}
else {shape <- 20}
# Plot Points based on sliders
if (dotalpha > 1){dotalpha <- 1}
if (dotalpha < 0){dotalpha <- 0}
plt <- plt + geom_point(shape = shape,size=dotsize, alpha=dotalpha, na.rm=TRUE)
if (xaxis_lim[2] - xaxis_lim[1] <= 100 && xaxis_lim[2] - xaxis_lim[1] > 50){xsep <- 10}
else if (xaxis_lim[2] - xaxis_lim[1] <= 50){xsep <- 5}
else{xsep <- 20}
# Plot Attributes
plt <- plt + ggtitle("Ratings Due to Movie Budget") +
xlab("Budget (in Millions)") +
ylab("Rating") +
scale_x_continuous(breaks = seq(0,200,xsep), labels = dollar, limits = xaxis_lim) +
scale_y_continuous(breaks = c(seq(1,10,1)), limits = yaxis_lim) +
theme(axis.title=element_text(size=14,face="bold")) +
theme(title = element_text(size=18)) +
theme(legend.position="bottom")
#Define Color Scheme
if (colorScheme != "None" && colorScheme != "Default") {plt <- plt + scale_colour_brewer(palette=colorScheme, limits = levels(localFrame$mpaa))}
else if (colorScheme == "Default") {plt <- plt + scale_colour_brewer(limits = levels(localFrame$mpaa))}
else {plt <- plt + scale_colour_grey(start = 0.5, end = 0.5, limits = levels(localFrame$mpaa))}
return(plt)
}
#### CREATING DATA TABLE ####
createDataTable <- function(localFrame, groupMPAA, GroupGenre, xaxis_lim, yaxis_lim){
#subset based on MPAA rating
if (groupMPAA != "All"){
movies_sub <- subset(localFrame, mpaa == groupMPAA)
}
else{movies_sub <- localFrame}
#subset based on genre
genre_names <- c("Action", "Animation", "Comedy", "Drama",
"Documentary", "Romance", "Short")
genre_truth <- as.numeric(GroupGenre)
if (sum(as.numeric(genre_truth)) > 0){
movies_sub <- subset(movies_sub, genre %in% genre_names[genre_truth])
}
#subset based on limits
movies_sub <- subset(movies_sub, budget/1000000 >= xaxis_lim[1] & budget/1000000 <= xaxis_lim[2])
movies_sub <- subset(movies_sub, rating >= yaxis_lim[1] & rating <= yaxis_lim[2])
summary_ntable <- data.frame(movies_sub$length, movies_sub$budget/1000000, movies_sub$rating, movies_sub$votes)
summary_ftable <- data.frame(movies_sub$mpaa, movies_sub$genre)
names(summary_ntable) <- c("Length", "Budget(Millions)", "Rating", "Votes")
names(summary_ftable) <- c("MPAA Rating", "Genre")
summary_ntable <- summary(summary_ntable, maxsum = 10)
summary_ftable <- summary(summary_ftable, maxsum = 10)
summary_list <- list(summary_ntable, summary_ftable)
return(summary_list)
}
##### GLOBAL OBJECTS #####
# Shared data
globalData <- loadData()
palette1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
##### SHINY SERVER #####
#CREATE SERVER
shinyServer(function(input, output) {
localFrame <- globalData
output$scatterPlot <- renderPlot({
scatterPlot <- getPlot(
localFrame, input$groupMPAA, input$GroupGenre,
input$colorScheme, input$dotsize, input$dotalpha,
input$xaxis_lim, input$yaxis_lim, input$pointShape
)
print(scatterPlot)
})
output$table_numeric <- renderTable({
datatable <- createDataTable(
localFrame, input$groupMPAA, input$GroupGenre,
input$xaxis_lim, input$yaxis_lim
)
return(datatable[[1]])
}, include.rownames = FALSE)
output$table_factor <- renderTable({
datatable <- createDataTable(
localFrame, input$groupMPAA, input$GroupGenre,
input$xaxis_lim, input$yaxis_lim
)
return(datatable[[2]])
}, include.rownames = FALSE)
})
runApp()
runApp()
library(shiny)
library(ggplot2)
library(reshape)
library(gridExtra)
teams <- read.csv("Teams.csv", header = TRUE)
teams <- subset(teams, yearID >= 2000)
teams[,"percentW"] <- teams$W/teams$G
mean_HA<- aggregate(teams$HA, list(time=teams$yearID), mean)[,2]
mean_HRA <-aggregate(teams$HRA, list(time=teams$yearID), mean)[,2]
mean_BBA <-aggregate(teams$BBA, list(time=teams$yearID), mean)[,2]
mean_SOA <-aggregate(teams$SOA, list(time=teams$yearID), mean)[,2]
mean_E<-aggregate(teams$E, list(time=teams$yearID), mean)[,2]
teams[,"meanHA"] <- rep(mean_HA, rep(30,14))
teams[,"meanHRA"] <-rep(mean_HRA, rep(30,14))
teams[,"meanBBA"] <-rep(mean_BBA, rep(30,14))
teams[,"meanSOA"] <-rep(mean_SOA, rep(30,14))
teams[,"meanE"] <-rep(mean_E, rep(30,14))
appearance <-read.csv("Appearances.csv", header = TRUE)
salary <- read.csv("Salaries.csv", header = TRUE)
players <- read.csv("Master.csv", header = TRUE)
fullName <- paste(players$nameFirst, players$nameLast)
players[,"fullName"] <- fullName
batting <- read.csv("Batting.csv", header = TRUE)
batting <- subset(batting, yearID >= 2000)
batting[,"AVG"] <- batting$H/batting$AB
batting<- subset(batting,!is.na(batting$AVG) & batting$AVG !=0)
batting<- merge(batting, players, by=c("playerID"))
batting<- merge(batting, appearance, by=c("playerID","yearID"))
pitching <- read.csv("Pitching.csv", header = TRUE)
pitching <- subset(pitching, yearID >= 2000)
pitching<- merge(pitching, players, by=c("playerID"))
test <- data.frame(12:1)
rownames(test) <- c("Pitcher","Pitcher Help","Catcher", "First Base", "Second Base",
"Third Base", "Short Stop", "Left Fielder", "Right Fielder", "Center Fielder",
"Out Fielder", "DH")
colnames(test) <- c("Players")
getPlot <- function(localFrame,franchiseNames_NL, franchiseNames_AL,league, year){
## NL or AL ##
if(league == "National League"){
localFrame <- subset(localFrame, localFrame$franchID %in% franchiseNames_NL)
}else{
localFrame <- subset(localFrame, localFrame$franchID %in% franchiseNames_AL)
}
## time range ##
p <- ggplot(localFrame, aes(x = yearID, y = percentW))
p <- p +
geom_rect(xmin = year[1], xmax = year[2], ymin = -Inf, ymax = Inf, alpha = 0.4,fill = 'grey') +
geom_line()
}
getDetail <- function(localFrame,franchiseNames_NL, franchiseNames_AL,league, year, factors){
if(league == "National League"){
localFrame <- subset(localFrame, localFrame$franchID %in% franchiseNames_NL)
}else{
localFrame <- subset(localFrame, localFrame$franchID %in% franchiseNames_AL)
}
mean_df<-cbind(teams[1:14,50:54])
localFrame <- subset(localFrame, localFrame$yearID >= year[1] & localFrame$yearID <= year[2])
v<-paste("mean", factors, sep="")
mel_D <- melt(localFrame[,c("yearID",factors)], id = c("yearID"))
mel_M <- melt(localFrame[,c("yearID",v)], id = c("yearID"))
mel_T <- cbind(mel_D,mel_M)
colnames(mel_T) <- c("yearID", "variable", "value","yearID", "mean", "meanValue")
d <- ggplot(mel_T,aes(x = yearID, y= value)) +
geom_line()+
facet_wrap(~variable)
}
getTeamName<- function(localFrame,franchiseNames_NL, franchiseNames_AL,league){
if(league == "National League"){
localFrame <- subset(localFrame, localFrame$franchID ==franchiseNames_NL)
localFrame <- localFrame[14,]
name<- paste(localFrame$name)
}else{
localFrame <- subset(localFrame, localFrame$franchID == franchiseNames_AL)
localFrame <- localFrame[14,]
name<- paste(localFrame$name)
}
return(name)
}
getTable <- function(local_batter,local_pitcher,position,appearance){
if(position == "Batters"){
if(appearance == "G_1b"){
local_batter <- subset(local_batter, local_batter$G_1b >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_G1b" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else if (appearance == "G_2b"){
local_batter <- subset(local_batter, local_batter$G_2b >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_G2b" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else if (appearance == "G_3b"){
local_batter <- subset(local_batter, local_batter$G_3b >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_G3b" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else if (appearance == "G_ss"){
local_batter <- subset(local_batter, local_batter$G_ss >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_Gss" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else if (appearance == "G_lf"){
local_batter <- subset(local_batter, local_batter$G_lf >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_Glf" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else if (appearance == "G_cf"){
local_batter <- subset(local_batter, local_batter$G_cf >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_Gcf" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else if (appearance == "G_rf"){
local_batter <- subset(local_batter, local_batter$G_rf >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_Grf" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else if (appearance == "G_of"){
local_batter <- subset(local_batter, local_batter$G_of >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_Gof" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else if (appearance == "G_dh"){
local_batter <- subset(local_batter, local_batter$G_dh >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_Gdh" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}else{
local_batter <- subset(local_batter, local_batter$G_c >=50)
player_batting <- data.frame(local_batter[,c("fullName","yearID","AVG","SO","RBI","SB", "H", "X2B","HR","playerID")])
addRadioButtons <- paste0('<input type="radio" name="batters_Gc" value="',player_batting$playerID[1:nrow(player_batting)],'">',"")
#Display table with radio buttons
colnames(player_batting) <- c("Name", "Year", "Batting Average (AVG)","Strike Outs (SO)", "Runs Batted In (RBI)",
"Stolen Bases", "Hits", "Doubles","Home Run")
cbind(Pick=addRadioButtons, player_batting[1:9])
}
}else{
player_pitching <- data.frame(local_pitcher[,c("fullName","yearID")])
addRadioButtons <- paste0('<input type="radio" name="pitchers" value="',player_pitching$playerID[1:nrow(player_pitching)], '">',"")
#Display table with radio buttons
cbind(Pick=addRadioButtons, player_pitching)
}
}
getBatter <- function(local_batter,batters_G1b,batters_G2b,batters_G3b, batters_Gss,
batters_Glf,batters_Gcf, batters_Grf, batters_Gof,
batters_Gdh, batters_Gc,
appearance, position, local_pitcher, pitchers){
if(position == "Batters"){
if(appearance == "G_1b"){
local_batter <- subset(local_batter, local_batter$playerID == batters_G1b)
}else if(appearance == "G_2b"){
local_batter <- subset(local_batter, local_batter$playerID == batters_G2b)
}else if(appearance == "G_3b"){
local_batter <- subset(local_batter, local_batter$playerID == batters_G3b)
}else if(appearance == "G_ss"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Gss)
}else if(appearance == "G_lf"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Glf)
}else if(appearance == "G_cf"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Gcf)
}else if(appearance == "G_rf"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Grf)
}else if(appearance == "G_of"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Gof)
}else if(appearance == "G_dh"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Gdh)
}else{
local_batter <- subset(local_batter, local_batter$playerID == batters_Gc)
}
mel_Hits <- melt(local_batter[,c("yearID","H","X2B","HR")], id = c("yearID"))
hits <- ggplot(mel_Hits, aes(x = yearID, y = value)) +
geom_line(aes(group = variable, color =variable))
SO <- ggplot(data = local_batter, aes(x = factor(yearID), y = SO)) +
geom_bar()
AVG <- ggplot(data = local_batter, aes(x = factor(yearID), y = AVG))+
geom_bar()
RBI <- ggplot(data = local_batter, aes(x = factor(yearID), y = RBI))+
geom_bar()
SB <- ggplot(data = local_batter, aes(x = factor(yearID), y = SB))+
geom_bar()
grid.arrange(hits,SO, AVG,RBI,nrow=2,ncol=2)
}else{
local_batter <- subset(local_batter, local_batter$playerID == batters)
}
}
getText <- function(local_batter,batters_G1b,batters_G2b,batters_G3b, batters_Gss,
batters_Glf,batters_Gcf, batters_Grf, batters_Gof,
batters_Gdh, batters_Gc,
appearance, position, local_pitcher, pitchers){
if(position == "Batters"){
if(appearance == "G_1b"){
local_batter <- subset(local_batter, local_batter$playerID == batters_G1b)
}else if(appearance == "G_2b"){
local_batter <- subset(local_batter, local_batter$playerID == batters_G2b)
}else if(appearance == "G_3b"){
local_batter <- subset(local_batter, local_batter$playerID == batters_G3b)
}else if(appearance == "G_ss"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Gss)
}else if(appearance == "G_lf"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Glf)
}else if(appearance == "G_cf"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Gcf)
}else if(appearance == "G_rf"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Grf)
}else if(appearance == "G_of"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Gof)
}else if(appearance == "G_dh"){
local_batter <- subset(local_batter, local_batter$playerID == batters_Gdh)
}else{
local_batter <- subset(local_batter, local_batter$playerID == batters_Gc)
}
}
else{
}
local_batter <- local_batter[1,]
name<-local_batter$fullName
print(name)
}
hope<-data.frame(12:1)
getFantacy <- function(local_batter,batters_G1b,batters_G2b,batters_G3b, batters_Gss,
batters_Glf,batters_Gcf, batters_Grf, batters_Gof,
batters_Gdh, batters_Gc,
appearance, position, local_pitcher, pitchers){
for( i in 1:nrow(test)){
test[i,] <- batters
}
}
global <- teams
tab_batter <- batting
tab_pitcher <- pitching
### Shiny Server ###
shinyServer(
function(input, output){
localFrame <- global
local_batter <- tab_batter
local_pitcher <- tab_pitcher
output$plot <- renderPlot({
plot <- getPlot(localFrame,
input$franchiseNames_NL,
input$franchiseNames_AL,
input$league,
input$year
)
print(plot)
})
output$plot_detail <- renderPlot({
plot_detail <- getDetail(localFrame,
input$franchiseNames_NL,
input$franchiseNames_AL,
input$league,
input$year,
input$factors)
print(plot_detail)
})
output$team <- renderText({
team <- getTeamName(localFrame,
input$franchiseNames_NL,
input$franchiseNames_AL,
input$league)
})
output$plot_table <-renderDataTable({
plot_table <- getTable(local_batter,
local_pitcher,
input$position,
input$appearance)
#       print(plot_table)
},options = list(bSortClasses = TRUE,aLengthMenu = c(10, 30, 50), iDisplayLength = 10)
)
output$Batter <- renderPlot({
plot_Batter <- getBatter(local_batter,
input$batters_G1b,
input$batters_G2b,
input$batters_G3b,
input$batters_Gss,
input$batters_Glf,
input$batters_Gcf,
input$batters_Grf,
input$batters_Gof,
input$batters_Gdh,
input$batters_Gc,
input$appearance,
input$position,
local_pitcher,
input$pitchers)
print(plot_Batter)
})
output$text <-renderText({
text <- getText(local_batter,
input$batters_G1b,
input$batters_G2b,
input$batters_G3b,
input$batters_Gss,
input$batters_Glf,
input$batters_Gcf,
input$batters_Grf,
input$batters_Gof,
input$batters_Gdh,
input$batters_Gc,
input$appearance,
input$position,
local_pitcher,
input$pitchers)
})
FAT <- reactive({
data.frame(
Name = c("1b",
"2b",
"3b",
"ss",
"lf",
"cf",
"rf",
"of",
"dh",
"c"),
Value = as.character(c( input$batters_G1b,
input$batters_G2b,
input$batters_G3b,
input$batters_Gss,
input$batters_Glf,
input$batters_Gcf,
input$batters_Grf,
input$batters_Gof,
input$batters_Gdh,
input$batters_Gc
))
)
})
output$fantacy <- renderTable({
FAT()
})
}
)
setwd("~/msan622/final-project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
